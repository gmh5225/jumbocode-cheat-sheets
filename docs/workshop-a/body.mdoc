## Frontend vs. backend

{% comment %}
Can reuse public workshop's content. Gonna copy and paste it over later after it's been proofread/tested.
{% /comment %}

## Git and GitHub

{% comment %}
Can reuse pre-Workshop A's explanation on this.
{% /comment %}

## GitHub PR flow

{% callout %}
**What is a PR?**

A PR in GitHub is a Pull Request ‚Äî&nbsp;you requesting that code from your *branch* gets *pulled* into the main branch, so your changes get merged into the working codebase.

Before that happens though, it's good practice to have someone who reviews your changes. That way, they can point out things that you might have overlooked or things to make your code better.
{% /callout %}

### Creating a branch

A *branch* allows you to work on your own version of the code, without anyone working on top of you. The branch where the current "final" code lives is generally named `main`. This is the branch that gets put it for users to use, etc.

To create your own branch, you need to start on the branch that you want to *branch off of.*Your new branch will be a copy of this branch at this moment in time. You almost always want to branch off of the latest code on `main` ‚Äî not someone else's branch.

To create your branch, switch you current branch in Git to `main` and then download ("pull") any new changes that might've been added to `main` since you last pulled changes. The "change branch" command is named, somewhat non-obviously, "checkout".

Then, create your new branch with `git checkout` again ‚Äî the `-b` flag tells Git "it's okay to make a new branch since this doesn't exist already". Name your branch something short, descriptive, and catchy. I like to prefix it with my name so I don't collide with other people's branch names.

```bash
git checkout main # Changes branch to main
git pull # Pulls down latest changes on main
git checkout -b ben/add-login-page # Create your new branch off of main
```

{% callout %}
When you `checkout`, Git will do its best to bring your "uncommitted" changes to the branch you switch to, so you can commit them there. If you don't want this, make sure to commit to your old branch before switching to `main`.

If you don't know what *committing* is, don't worry ‚Äî we'll cover it in a moment.
{% /callout %}

### Committing to your branch

Once you've made some changes to your code, it's time to create a *commit*. With Git, a *commit* is a small group of changes (possibly across different files). Every time you make a set of changes that kinda all relate, make a commit.

Think about them like save points in a video game, triggering whenever you make some progress. If your latest changes become overwhelming, you can revert to the previous code you committed (or any commit before that). But if your commits contain a huge number of changes, you won't have a very useful "save point" to revert to. (This metaphor is mediocre at best.)

There's two steps to committing changes:

1. Staging
1. Committing

You need to *stage* the files with changes that you want to commit, ready for the next commit. (Why do we have to do this? You could conceivably *stage* a few related files, commit, stage the rest of the files, and commit again ‚Äî producing two commits containing different changes from different files.)

To stage files, use `git add <filenames>`:

```bash
git add a.js b.js folder/c.js
```

In practice, we almost always want to just stage everything, which we can do using this command:

```bash
git add . # The period means "everythig within this folder and its subfolders"
```

You can check which files you've staged using `git status`.

Next, you create a commit! Again, commits are bundles of changes across all the files you've just *staged*. Commits require you to write a *message* that quickly describes what changes you made. You provide that message using the `-m` *flag*.

```bash
git commit -m "Make text inputs red when invalid"
```

Just like that, you've made a commit! You can run `git status` again to make sure.

{% callout %}
If you run `git commit` without the message all-in-one, you'll probably be dropped into the *Vim* text editor by default. It's kinda tricky to exit Vim, and people will make lots of jokes about this, ha ha!

Anyway just type your message into the Vim text editor (you'll see it come up in the editor) and then hit `Escape` to take your cursor out of the editing mode, then type `:wq!` (you should see the letters coming up at the bottom of the editor; wq means "write (save) and then quit" and the exclamation mark means you mean it).

Vim is hard to exit, ha ha! Ha ha! The joke never gets old! üòê
{% /callout %}

### Pushing your changes

Now your changes are committed to Git, but recall that Git is on your computer and GitHub is how you have other people use the same files in their own computers' Git. (The code flows from your computer's Git ‚Üí GitHub for synchronization and fancy features like Pull Requests ‚Üí back down to each of your teammates' computers.)

{% callout %}
Believe it or not, Pull Requests are a feature made by GitHub (the company), not Git (the free and open source thing that's been around forever).

Good idea GitHub!
{% /callout %}

To have your branch with its commits show up on GitHub dot com, you'll want to *push* your changes:

```bash
git push
```

{% callout %}
You *push* your changes up to GitHub from your computer, and *pull* your teammates' latest changes down from GitHub to your computer! That's quite cute, isn't it.
{% /callout %}

### Testing your own changes

Woah there ‚Äî this is a *great* time to test your changes to make sure they work, before you open a pull request.

Run the code and click through your changes to make sure everything's working as expected. Try some edge cases to see if they work too! (You will not believe how often I discover edge cases that aren't working even though I was *about* to have a team member review it.)

### Opening a PR on GitHub

Now that your code is 100% totally absolutely working, it's time for someone else to review your code.

Open up your team's repository of code on GitHub's website. Switch to your branch (1), click "Contribute" (2), and then "Open pull request" (3).

![](/docs/workshop-a/2023-07-31%20at%2023.31.14@2x.png)

{% callout %}
If you've pushed lately then GitHub will give you a helpful yellow banner that only takes one-click to open a pull request, that's pretty nifty and does the same thing.
{% /callout %}

Fill out the description of your pull request with all the information someone else will need to review it: what the change does, maybe why you're doing it, and how they can test it on their computer.

In the upper-right part of the pull request, you can tag people who are gonna review your code, which sends them an email asking them to do it. Most likely this will be your Tech Lead and/or Project Manager! Go ahead and create the pull request!

### Reviewing your own PR

Once you've created your pull request, I like to check the "Files changed" tab because it gives a really nice view of what you've added (green) and removed (red) from the code that's currently in `main`. It lets me catch anything that I've accidentally committed, and I can go back to my code and fix it + commit those changes to the same branch.

{% callout %}
Even after opening a pull request, additional commits to the same branch will update the same pull request ‚Äî no need to open another one! **You should probably only ever need one pull request per branch.**
{% /callout %}

### Conducting a PR review (more commonly for Project Managers + Tech Leads)

### Re-requesting review

### Merging
